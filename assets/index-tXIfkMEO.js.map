{"version":3,"file":"index-tXIfkMEO.js","sources":["../../menu.js","../../node_modules/three/examples/jsm/loaders/DRACOLoader.js","../../main.js"],"sourcesContent":["// Menu functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n    const menuTabs = document.querySelectorAll('.menu-tab');\n    const loadingContainer = document.getElementById('loading-container');\n    const loadingText = document.getElementById('loading-text');\n\n    menuTabs.forEach(tab => {\n        tab.addEventListener('click', () => {\n            // Update active state\n            menuTabs.forEach(t => t.classList.remove('active'));\n            tab.classList.add('active');\n\n            // Update loading text\n            const fractalType = tab.dataset.fractal;\n            loadingText.textContent = `Loading ${fractalType}...`;\n            loadingContainer.style.display = 'block';\n\n            // Dispatch custom event for fractal change\n            const event = new CustomEvent('fractalChange', {\n                detail: { type: fractalType }\n            });\n            window.dispatchEvent(event);\n        });\n    });\n}); ","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tLoader,\n\tLinearSRGBColorSpace,\n\tSRGBColorSpace\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass DRACOLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.decoderPath = '';\n\t\tthis.decoderConfig = {};\n\t\tthis.decoderBinary = null;\n\t\tthis.decoderPending = null;\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\n\t\tthis.defaultAttributeIDs = {\n\t\t\tposition: 'POSITION',\n\t\t\tnormal: 'NORMAL',\n\t\t\tcolor: 'COLOR',\n\t\t\tuv: 'TEX_COORD'\n\t\t};\n\t\tthis.defaultAttributeTypes = {\n\t\t\tposition: 'Float32Array',\n\t\t\tnormal: 'Float32Array',\n\t\t\tcolor: 'Float32Array',\n\t\t\tuv: 'Float32Array'\n\t\t};\n\n\t}\n\n\tsetDecoderPath( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetDecoderConfig( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis.parse( buffer, onLoad, onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\n\tparse( buffer, onLoad, onError = ()=>{} ) {\n\n\t\tthis.decodeDracoFile( buffer, onLoad, null, null, SRGBColorSpace ).catch( onError );\n\n\t}\n\n\tdecodeDracoFile( buffer, callback, attributeIDs, attributeTypes, vertexColorSpace = LinearSRGBColorSpace, onError = () => {} ) {\n\n\t\tconst taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs,\n\t\t\tvertexColorSpace: vertexColorSpace,\n\t\t};\n\n\t\treturn this.decodeGeometry( buffer, taskConfig ).then( callback ).catch( onError );\n\n\t}\n\n\tdecodeGeometry( buffer, taskConfig ) {\n\n\t\tconst taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet worker;\n\t\tconst taskID = this.workerNextTaskID ++;\n\t\tconst taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tconst geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tgeometryPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t}\n\n\t_createGeometry( geometryData ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tconst result = geometryData.attributes[ i ];\n\t\t\tconst name = result.name;\n\t\t\tconst array = result.array;\n\t\t\tconst itemSize = result.itemSize;\n\n\t\t\tconst attribute = new BufferAttribute( array, itemSize );\n\n\t\t\tif ( name === 'color' ) {\n\n\t\t\t\tthis._assignVertexColorSpace( attribute, result.vertexColorSpace );\n\n\t\t\t\tattribute.normalized = ( array instanceof Float32Array ) === false;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( name, attribute );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\t_assignVertexColorSpace( attribute, inputColorSpace ) {\n\n\t\t// While .drc files do not specify colorspace, the only 'official' tooling\n\t\t// is PLY and OBJ converters, which use sRGB. We'll assume sRGB when a .drc\n\t\t// file is passed into .load() or .parse(). GLTFLoader uses internal APIs\n\t\t// to decode geometry, and vertex colors are already Linear-sRGB in there.\n\n\t\tif ( inputColorSpace !== SRGBColorSpace ) return;\n\n\t\tconst _color = new Color();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t_color.fromBufferAttribute( attribute, i ).convertSRGBToLinear();\n\t\t\tattribute.setXYZ( i, _color.r, _color.g, _color.b );\n\n\t\t}\n\n\t}\n\n\t_loadLibrary( url, responseType ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t}\n\n\tpreload() {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t}\n\n\t_initDecoder() {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tconst useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tconst librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tconst jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tconst fn = DRACOWorker.toString();\n\n\t\t\t\tconst body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t}\n\n\t_getWorker( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\tif ( this.workerSourceURL !== '' ) {\n\n\t\t\tURL.revokeObjectURL( this.workerSourceURL );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction DRACOWorker() {\n\n\tlet decoderConfig;\n\tlet decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig ); // eslint-disable-line no-undef\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tconst taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tconst draco = module.draco;\n\t\t\t\t\tconst decoder = new draco.Decoder();\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst geometry = decodeGeometry( draco, decoder, new Int8Array( buffer ), taskConfig );\n\n\t\t\t\t\t\tconst buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, array, taskConfig ) {\n\n\t\tconst attributeIDs = taskConfig.attributeIDs;\n\t\tconst attributeTypes = taskConfig.attributeTypes;\n\n\t\tlet dracoGeometry;\n\t\tlet decodingStatus;\n\n\t\tconst geometryType = decoder.GetEncodedGeometryType( array );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeArrayToMesh( array, array.byteLength, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeArrayToPointCloud( array, array.byteLength, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tconst geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( const attributeName in attributeIDs ) {\n\n\t\t\tconst attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tlet attribute;\n\t\t\tlet attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tconst attributeResult = decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute );\n\n\t\t\tif ( attributeName === 'color' ) {\n\n\t\t\t\tattributeResult.vertexColorSpace = taskConfig.vertexColorSpace;\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( attributeResult );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tgeometry.index = decodeIndex( draco, decoder, dracoGeometry );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeIndex( draco, decoder, dracoGeometry ) {\n\n\t\tconst numFaces = dracoGeometry.num_faces();\n\t\tconst numIndices = numFaces * 3;\n\t\tconst byteLength = numIndices * 4;\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetTrianglesUInt32Array( dracoGeometry, byteLength, ptr );\n\t\tconst index = new Uint32Array( draco.HEAPF32.buffer, ptr, numIndices ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn { array: index, itemSize: 1 };\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tconst numComponents = attribute.num_components();\n\t\tconst numPoints = dracoGeometry.num_points();\n\t\tconst numValues = numPoints * numComponents;\n\t\tconst byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n\t\tconst dataType = getDracoDataType( draco, attributeType );\n\n\t\tconst ptr = draco._malloc( byteLength );\n\t\tdecoder.GetAttributeDataArrayForAllPoints( dracoGeometry, attribute, dataType, byteLength, ptr );\n\t\tconst array = new attributeType( draco.HEAPF32.buffer, ptr, numValues ).slice();\n\t\tdraco._free( ptr );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n\tfunction getDracoDataType( draco, attributeType ) {\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array: return draco.DT_FLOAT32;\n\t\t\tcase Int8Array: return draco.DT_INT8;\n\t\t\tcase Int16Array: return draco.DT_INT16;\n\t\t\tcase Int32Array: return draco.DT_INT32;\n\t\t\tcase Uint8Array: return draco.DT_UINT8;\n\t\t\tcase Uint16Array: return draco.DT_UINT16;\n\t\t\tcase Uint32Array: return draco.DT_UINT32;\n\n\t\t}\n\n\t}\n\n}\n\nexport { DRACOLoader };\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\n\nconsole.log('main.js starting execution...');\n\n// Safety check for THREE\nif (typeof THREE === 'undefined') {\n    console.error('THREE is not defined in main.js!');\n    throw new Error('THREE is not defined');\n}\n\nconsole.log('THREE is defined in main.js, proceeding with initialization...');\n\n// Create scene\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x000000);\n\n// Create camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 5;\n\n// Create renderer\nconst renderer = new THREE.WebGLRenderer({ \n    antialias: false,\n    powerPreference: \"high-performance\",\n    precision: 'mediump'\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.shadowMap.enabled = false;\ndocument.body.appendChild(renderer.domElement);\n\n// Add loading manager\nconst loadingManager = new THREE.LoadingManager();\nloadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n    const progress = (itemsLoaded / itemsTotal) * 100;\n    const progressBar = document.getElementById('loading-progress');\n    const loadingText = document.getElementById('loading-text');\n    progressBar.style.width = progress + '%';\n    loadingText.textContent = Math.round(progress) + '%';\n};\n\nloadingManager.onLoad = () => {\n    // Hide loading bar when everything is loaded\n    const loadingContainer = document.getElementById('loading-container');\n    loadingContainer.style.display = 'none';\n};\n\nloadingManager.onError = (url) => {\n    console.error(`Error loading: ${url}`);\n    const loadingText = document.getElementById('loading-text');\n    loadingText.textContent = 'Error loading model!';\n    loadingText.style.color = '#ff4444';\n};\n\n// Create loader\nconst loader = new GLTFLoader(loadingManager);\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/');\nloader.setDRACOLoader(dracoLoader);\n\n// Create a group to hold all models\nconst modelGroup = new THREE.Group();\nscene.add(modelGroup);\n\n// Store the base model for cloning\nlet baseModel = null;\nlet baseModelSize = 0;\nlet currentFractal = 'menger';\n\n// Create lights\nconst ambientLight = new THREE.AmbientLight(0xffffff, 2.0);\nscene.add(ambientLight);\n\n// Create specific lights for Menger\nconst mengerCenterLight = new THREE.PointLight(0x4169E1, 4.0, 8);\nmengerCenterLight.position.set(0, 0, 0);\nscene.add(mengerCenterLight);\n\nconst mengerKeyLight = new THREE.DirectionalLight(0xffffff, 3.0);\nmengerKeyLight.position.set(3, 3, 3);\nscene.add(mengerKeyLight);\n\nconst mengerFillLight = new THREE.DirectionalLight(0x4169E1, 2.5);\nmengerFillLight.position.set(-3, -2, 2);\nscene.add(mengerFillLight);\n\nconst mengerBackLight = new THREE.DirectionalLight(0xffffff, 2.0);\nmengerBackLight.position.set(0, 0, -3);\nscene.add(mengerBackLight);\n\n// Create specific lights for Sierpinski\nconst sierpinskiCenterLight = new THREE.PointLight(0xffffff, 5.0, 10);\nsierpinskiCenterLight.position.set(0, 0, 0);\nscene.add(sierpinskiCenterLight);\nsierpinskiCenterLight.visible = false; // Initially hidden\n\nconst sierpinskiFillLight = new THREE.DirectionalLight(0x4169E1, 2.0);\nsierpinskiFillLight.position.set(0, 5, 0);\nscene.add(sierpinskiFillLight);\nsierpinskiFillLight.visible = false; // Initially hidden\n\n// Function to create a Menger Sponge using the loaded model as the base cube\nfunction createMengerSponge(level, size) {\n    const group = new THREE.Group();\n    const material = new THREE.MeshStandardMaterial({\n        color: 0x4169E1,\n        metalness: 0.7,\n        roughness: 0.2,\n        transparent: true,\n        opacity: 1.0,\n        flatShading: true\n    });\n    \n    function subdivide(x, y, z, size, currentLevel) {\n        if (currentLevel === 0) {\n            const modelInstance = baseModel.clone();\n            modelInstance.scale.setScalar(size / baseModelSize);\n            modelInstance.position.set(x, y, z);\n            modelInstance.traverse((child) => {\n                if (child.isMesh) {\n                    child.material = material;\n                }\n            });\n            group.add(modelInstance);\n            return;\n        }\n\n        const newSize = size / 3;\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                for (let k = -1; k <= 1; k++) {\n                    // Skip center pieces on each face\n                    if (Math.abs(i) + Math.abs(j) + Math.abs(k) <= 1) continue;\n                    \n                    const newX = x + i * newSize;\n                    const newY = y + j * newSize;\n                    const newZ = z + k * newSize;\n                    \n                    subdivide(newX, newY, newZ, newSize, currentLevel - 1);\n                }\n            }\n        }\n    }\n\n    // Start subdivision\n    subdivide(0, 0, 0, size, level);\n    return group;\n}\n\n// Function to create a 3D Sierpinski Tetrahedron\nfunction createSierpinskiTetrahedron(level, size) {\n    const group = new THREE.Group();\n    \n    function subdivide(x, y, z, size, currentLevel) {\n        if (currentLevel === 0) {\n            // Clone the base model for this position\n            const modelInstance = baseModel.clone();\n            modelInstance.scale.setScalar(size / baseModelSize);\n            modelInstance.position.set(x, y, z);\n            group.add(modelInstance);\n            return;\n        }\n\n        const newSize = size / 2;\n        const height = size * Math.sqrt(2/3); // Height of regular tetrahedron\n        \n        // Calculate positions for the four sub-tetrahedra\n        // These positions form a regular tetrahedron\n        const positions = [\n            { x: x - newSize/2, y: y - height/4, z: z - newSize/2 },  // Bottom left\n            { x: x + newSize/2, y: y - height/4, z: z - newSize/2 },  // Bottom right\n            { x: x, y: y - height/4, z: z + newSize/2 },              // Bottom back\n            { x: x, y: y + height/2, z: z }                           // Top\n        ];\n\n        // Create sub-tetrahedra\n        positions.forEach(pos => {\n            subdivide(pos.x, pos.y, pos.z, newSize, currentLevel - 1);\n        });\n    }\n\n    // Start subdivision\n    subdivide(0, 0, 0, size, level);\n    return group;\n}\n\n// Function to create a simple Sierpinski pyramid with 5 models\nfunction createSimpleSierpinskiPyramid(size) {\n    const group = new THREE.Group();\n    \n    // Define the 5 positions for the models\n    // 4 models in a tight square formation + 1 centered above\n    const squareSize = size * 0.83;\n    const yOffset = -squareSize * 0.2;\n    const positions = [\n        { x: -squareSize/2, y: yOffset, z: -squareSize/2 },    // Bottom left\n        { x: squareSize/2, y: yOffset, z: -squareSize/2 },     // Bottom right\n        { x: squareSize/2, y: yOffset, z: squareSize/2 },      // Top right\n        { x: -squareSize/2, y: yOffset, z: squareSize/2 },     // Top left\n        { x: 0, y: squareSize + yOffset, z: 0 }                // Center top\n    ];\n\n    // Create models at each position\n    positions.forEach(pos => {\n        const modelInstance = baseModel.clone();\n        modelInstance.position.set(pos.x, pos.y, pos.z);\n        // Add a small point light to each model for Sierpinski\n        if (currentFractal === 'sierpinski') {\n            const modelLight = new THREE.PointLight(0xffffff, 2.0, 3);\n            modelLight.position.set(0, 0, 0);\n            modelInstance.add(modelLight);\n        }\n        group.add(modelInstance);\n    });\n\n    return group;\n}\n\n// Function to clear the current model\nfunction clearCurrentModel() {\n    while(modelGroup.children.length > 0) {\n        const child = modelGroup.children[0];\n        if (child.geometry) child.geometry.dispose();\n        if (child.material) {\n            if (Array.isArray(child.material)) {\n                child.material.forEach(material => material.dispose());\n            } else {\n                child.material.dispose();\n            }\n        }\n        modelGroup.remove(child);\n    }\n}\n\n// Add OrbitControls\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.1;\ncontrols.rotateSpeed = 0.7;\ncontrols.zoomSpeed = 0.7;\ncontrols.enablePan = false;\n\n// Function to update controls based on fractal type\nfunction updateControls(type) {\n    if (type === 'sierpinski') {\n        // Sierpinski controls - prevent zooming too close\n        const sierpinskiSize = 4 * 0.83; // Using the same size as the pyramid\n        controls.minDistance = sierpinskiSize * 1.5; // Minimum zoom distance\n        controls.maxDistance = 15; // Maximum zoom distance\n    } else {\n        // Menger controls - original settings\n        const modelSize = 2;\n        controls.minDistance = (modelSize * Math.sqrt(3) / 2) + 0.1;\n        controls.maxDistance = 10;\n    }\n    controls.target.set(0, 0, 0);\n    controls.update();\n}\n\n// Function to load a specific fractal model\nfunction loadFractalModel(type) {\n    // Clear any existing model first\n    clearCurrentModel();\n    currentFractal = type;\n    \n    // Update controls and lighting\n    updateControls(type);\n    updateLighting(type);\n    \n    // Reset loading progress\n    const progressBar = document.getElementById('loading-progress');\n    const loadingText = document.getElementById('loading-text');\n    const loadingContainer = document.getElementById('loading-container');\n    \n    progressBar.style.width = '0%';\n    loadingText.textContent = '0%';\n    loadingText.style.color = '#ffffff'; // Reset text color\n    loadingContainer.style.display = 'block';\n\n    \n    console.log(\"------- v1 -----\");\n    // Load the appropriate model based on type\n    // const modelPath = type === 'sierpinski' ? '/fractals/models/sierpinski.glb' : `/fractals/models/${type}_sponge.glb`;\n    const modelPath = type === 'sierpinski' \n    ? '/fractals/models/sierpinski.glb' \n    : '/fractals/models/menger_sponge.glb';\n\n    \n    console.log(`Attempting to load model from: ${modelPath}`);\n\n    console.log('Resolved model path:', new URL(modelPath, window.location.href).href);\n    \n    // Reset the loading manager\n    loadingManager.onStart = (url, itemsLoaded, itemsTotal) => {\n        console.log(`Started loading: ${url}`);\n    };\n    \n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n        const progress = (itemsLoaded / itemsTotal) * 100;\n        console.log(`Loading progress: ${progress.toFixed(2)}%`);\n        progressBar.style.width = progress + '%';\n        loadingText.textContent = Math.round(progress) + '%';\n    };\n    \n    loadingManager.onLoad = () => {\n        console.log('Loading complete!');\n        loadingContainer.style.display = 'none';\n    };\n    \n    loadingManager.onError = (url) => {\n        console.error(`Error loading: ${url}`);\n        loadingText.textContent = 'Error loading model!';\n        loadingText.style.color = '#ff4444';\n    };\n\n    // Load the model\n    loader.load(\n        modelPath,\n        (gltf) => {\n            console.log(`Model loaded successfully: ${modelPath}`);\n            const model = gltf.scene;\n            \n            // Store the base model and its size\n            baseModel = model;\n            const box = new THREE.Box3().setFromObject(model);\n            baseModelSize = Math.max(\n                box.max.x - box.min.x,\n                box.max.y - box.min.y,\n                box.max.z - box.min.z\n            );\n            \n            // Create and add the fractal\n            let fractal;\n            if (type === 'sierpinski') {\n                fractal = createSimpleSierpinskiPyramid(4);\n                camera.position.set(8, 8, 8);\n            } else {\n                fractal = createMengerSponge(1, 2);\n                camera.position.set(0, 0, 5);\n            }\n            \n            modelGroup.add(fractal);\n            controls.target.set(0, 0, 0);\n            controls.update();\n            \n            // Hide loading container\n            loadingContainer.style.display = 'none';\n        },\n        (xhr) => {\n            if (xhr.lengthComputable) {\n                const progress = (xhr.loaded / xhr.total * 100);\n                console.log(`Download progress: ${progress.toFixed(2)}%`);\n                progressBar.style.width = progress + '%';\n                loadingText.textContent = Math.round(progress) + '%';\n            }\n        },\n        (error) => {\n          console.error('Loader error:', error);\n          // Debug: Fetch the file manually and log its content\n          fetch('/fractals/models/sierpinski.glb')\n            .then(res => res.text())\n            .then(text => console.log('Fetched file content (first 100 chars):', text.slice(0, 100)))\n            .catch(e => console.error('Fetch error:', e));\n            loadingText.textContent = 'Error loading model!';\n            loadingText.style.color = '#ff4444';\n        }\n    );\n}\n\n// Helper function to update lighting based on fractal type\nfunction updateLighting(type) {\n    if (type === 'sierpinski') {\n        // Enable Sierpinski-specific lights\n        sierpinskiCenterLight.visible = true;\n        sierpinskiFillLight.visible = true;\n        // Disable Menger lights\n        mengerCenterLight.visible = false;\n        mengerKeyLight.visible = false;\n        mengerFillLight.visible = false;\n        mengerBackLight.visible = false;\n        // Adjust ambient light\n        ambientLight.intensity = 1.0;\n    } else {\n        // Enable Menger-specific lights\n        mengerCenterLight.visible = true;\n        mengerKeyLight.visible = true;\n        mengerFillLight.visible = true;\n        mengerBackLight.visible = true;\n        // Disable Sierpinski lights\n        sierpinskiCenterLight.visible = false;\n        sierpinskiFillLight.visible = false;\n        // Adjust ambient light\n        ambientLight.intensity = 1.5;\n    }\n}\n\n// Listen for fractal change events\nwindow.addEventListener('fractalChange', (event) => {\n    loadFractalModel(event.detail.type);\n});\n\n// Initial setup\nupdateControls('menger'); // Set initial controls for Menger\n\n// Optimized animation loop\nlet lastTime = 0;\nconst rotationSpeed = 0.001; // Reduced rotation speed\n\nfunction animate(currentTime) {\n    requestAnimationFrame(animate);\n    \n    // Calculate delta time for smooth animation\n    const delta = currentTime - lastTime;\n    lastTime = currentTime;\n    \n    // Only update rotation if enough time has passed and not in Sierpinski mode\n    if (delta > 16 && currentFractal !== 'sierpinski') { // Cap at ~60fps\n        modelGroup.rotation.x += rotationSpeed;\n        modelGroup.rotation.y += rotationSpeed;\n    }\n    \n    // Only update controls if they've changed\n    if (controls.enabled) {\n        controls.update();\n    }\n    \n    renderer.render(scene, camera);\n}\n\n// Start animation loop with timestamp\nanimate(performance.now());\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    const newWidth = window.innerWidth;\n    const newHeight = window.innerHeight;\n    \n    camera.aspect = newWidth / newHeight;\n    camera.updateProjectionMatrix();\n    \n    renderer.setSize(newWidth, newHeight);\n}); "],"names":["document","addEventListener","menuTabs","querySelectorAll","loadingContainer","getElementById","loadingText","forEach","tab","t","classList","remove","add","fractalType","dataset","fractal","textContent","style","display","event","CustomEvent","detail","type","window","dispatchEvent","_taskCache","WeakMap","DRACOWorker","decoderConfig","decoderPending","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","attribute","numComponents","num_components","numValues","num_points","byteLength","BYTES_PER_ELEMENT","dataType","Float32Array","DT_FLOAT32","Int8Array","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","Uint32Array","DT_UINT32","getDracoDataType","ptr","_malloc","GetAttributeDataArrayForAllPoints","array","HEAPF32","buffer","slice","_free","name","itemSize","onmessage","e","message","data","Promise","resolve","onModuleLoaded","DracoDecoderModule","taskConfig","then","module","Decoder","geometry","attributeIDs","attributeTypes","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeArrayToMesh","POINT_CLOUD","Error","PointCloud","DecodeArrayToPointCloud","ok","error_msg","index","attributes","self","attributeID","useUniqueIDs","GetAttributeByUniqueId","GetAttributeId","GetAttribute","attributeResult","vertexColorSpace","push","numFaces","num_faces","numIndices","GetTrianglesUInt32Array","decodeIndex","destroy","decodeGeometry","buffers","map","attr","postMessage","id","error","console","log","THREE","scene","THREE.Scene","background","THREE.Color","camera","THREE.PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","THREE.WebGLRenderer","antialias","powerPreference","precision","setSize","setPixelRatio","Math","min","devicePixelRatio","shadowMap","enabled","body","appendChild","domElement","loadingManager","THREE.LoadingManager","onProgress","url","itemsLoaded","itemsTotal","progress","progressBar","width","round","onLoad","onError","color","loader","GLTFLoader","dracoLoader","Loader","constructor","manager","super","this","decoderPath","decoderBinary","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","normal","uv","defaultAttributeTypes","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","load","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","parse","decodeDracoFile","SRGBColorSpace","catch","callback","LinearSRGBColorSpace","taskKey","JSON","stringify","has","cachedTask","get","key","promise","worker","taskID","taskCost","geometryPending","_getWorker","_worker","reject","_callbacks","_createGeometry","_releaseTask","set","geometryData","BufferGeometry","setIndex","BufferAttribute","i","length","result","_assignVertexColorSpace","normalized","setAttribute","inputColorSpace","_color","Color","il","count","fromBufferAttribute","convertSRGBToLinear","setXYZ","r","g","b","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","all","libraries","jsContent","wasmBinary","fn","toString","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","sort","a","debug","dispose","terminate","revokeObjectURL","setDRACOLoader","modelGroup","THREE.Group","baseModel","baseModelSize","currentFractal","ambientLight","THREE.AmbientLight","mengerCenterLight","THREE.PointLight","mengerKeyLight","THREE.DirectionalLight","mengerFillLight","mengerBackLight","sierpinskiCenterLight","visible","sierpinskiFillLight","controls","OrbitControls","updateControls","sierpinskiSize","minDistance","maxDistance","modelSize","sqrt","target","update","loadFractalModel","children","child","material","Array","isArray","clearCurrentModel","intensity","updateLighting","modelPath","location","href","onStart","toFixed","gltf","model","box","THREE.Box3","setFromObject","max","x","y","size","group","squareSize","yOffset","pos","modelInstance","clone","modelLight","createSimpleSierpinskiPyramid","level","THREE.MeshStandardMaterial","metalness","roughness","transparent","opacity","flatShading","subdivide","currentLevel","scale","setScalar","traverse","isMesh","newSize","j","k","abs","createMengerSponge","xhr","lengthComputable","loaded","total","fetch","res","text","enableDamping","dampingFactor","rotateSpeed","zoomSpeed","enablePan","lastTime","animate","currentTime","requestAnimationFrame","delta","rotation","render","performance","now","newWidth","newHeight","aspect","updateProjectionMatrix"],"mappings":"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","x_google_ignoreList":[1]}