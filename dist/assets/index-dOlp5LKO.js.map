{"version":3,"file":"index-dOlp5LKO.js","sources":["../../main.js","../../menu.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nconsole.log('main.js starting execution...');\n\n// Safety check for THREE\nif (typeof THREE === 'undefined') {\n    console.error('THREE is not defined in main.js!');\n    throw new Error('THREE is not defined');\n}\n\nconsole.log('THREE is defined in main.js, proceeding with initialization...');\n\n// Create scene\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x000000);\n\n// Create camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 5;\n\n// Create renderer\nconst renderer = new THREE.WebGLRenderer({ \n    antialias: false,\n    powerPreference: \"high-performance\",\n    precision: 'mediump'\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.shadowMap.enabled = false;\ndocument.body.appendChild(renderer.domElement);\n\n// Add loading manager\nconst loadingManager = new THREE.LoadingManager();\nloadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n    const progress = (itemsLoaded / itemsTotal) * 100;\n    const progressBar = document.getElementById('loading-progress');\n    const loadingText = document.getElementById('loading-text');\n    progressBar.style.width = progress + '%';\n    loadingText.textContent = Math.round(progress) + '%';\n};\n\nloadingManager.onLoad = () => {\n    // Hide loading bar when everything is loaded\n    const loadingContainer = document.getElementById('loading-container');\n    loadingContainer.style.display = 'none';\n};\n\nloadingManager.onError = (url) => {\n    console.error(`Error loading: ${url}`);\n    const loadingText = document.getElementById('loading-text');\n    loadingText.textContent = 'Error loading model!';\n    loadingText.style.color = '#ff4444';\n};\n\n// Create loader\nconst loader = new GLTFLoader(loadingManager);\n\n// Create a group to hold all models\nconst modelGroup = new THREE.Group();\nscene.add(modelGroup);\n\n// Store the base model for cloning\nlet baseModel = null;\nlet baseModelSize = 0;\nlet currentFractal = 'menger';\n\n// Create lights\nconst ambientLight = new THREE.AmbientLight(0xffffff, 2.0);\nscene.add(ambientLight);\n\n// Create specific lights for Menger\nconst mengerCenterLight = new THREE.PointLight(0x4169E1, 4.0, 8);\nmengerCenterLight.position.set(0, 0, 0);\nscene.add(mengerCenterLight);\n\nconst mengerKeyLight = new THREE.DirectionalLight(0xffffff, 3.0);\nmengerKeyLight.position.set(3, 3, 3);\nscene.add(mengerKeyLight);\n\nconst mengerFillLight = new THREE.DirectionalLight(0x4169E1, 2.5);\nmengerFillLight.position.set(-3, -2, 2);\nscene.add(mengerFillLight);\n\nconst mengerBackLight = new THREE.DirectionalLight(0xffffff, 2.0);\nmengerBackLight.position.set(0, 0, -3);\nscene.add(mengerBackLight);\n\n// Create specific lights for Sierpinski\nconst sierpinskiCenterLight = new THREE.PointLight(0xffffff, 5.0, 10);\nsierpinskiCenterLight.position.set(0, 0, 0);\nscene.add(sierpinskiCenterLight);\nsierpinskiCenterLight.visible = false; // Initially hidden\n\nconst sierpinskiFillLight = new THREE.DirectionalLight(0x4169E1, 2.0);\nsierpinskiFillLight.position.set(0, 5, 0);\nscene.add(sierpinskiFillLight);\nsierpinskiFillLight.visible = false; // Initially hidden\n\n// Function to create a Menger Sponge using the loaded model as the base cube\nfunction createMengerSponge(level, size) {\n    const group = new THREE.Group();\n    const material = new THREE.MeshStandardMaterial({\n        color: 0x4169E1,\n        metalness: 0.7,\n        roughness: 0.2,\n        transparent: true,\n        opacity: 1.0,\n        flatShading: true\n    });\n    \n    function subdivide(x, y, z, size, currentLevel) {\n        if (currentLevel === 0) {\n            const modelInstance = baseModel.clone();\n            modelInstance.scale.setScalar(size / baseModelSize);\n            modelInstance.position.set(x, y, z);\n            modelInstance.traverse((child) => {\n                if (child.isMesh) {\n                    child.material = material;\n                }\n            });\n            group.add(modelInstance);\n            return;\n        }\n\n        const newSize = size / 3;\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                for (let k = -1; k <= 1; k++) {\n                    // Skip center pieces on each face\n                    if (Math.abs(i) + Math.abs(j) + Math.abs(k) <= 1) continue;\n                    \n                    const newX = x + i * newSize;\n                    const newY = y + j * newSize;\n                    const newZ = z + k * newSize;\n                    \n                    subdivide(newX, newY, newZ, newSize, currentLevel - 1);\n                }\n            }\n        }\n    }\n\n    // Start subdivision\n    subdivide(0, 0, 0, size, level);\n    return group;\n}\n\n// Function to create a 3D Sierpinski Tetrahedron\nfunction createSierpinskiTetrahedron(level, size) {\n    const group = new THREE.Group();\n    \n    function subdivide(x, y, z, size, currentLevel) {\n        if (currentLevel === 0) {\n            // Clone the base model for this position\n            const modelInstance = baseModel.clone();\n            modelInstance.scale.setScalar(size / baseModelSize);\n            modelInstance.position.set(x, y, z);\n            group.add(modelInstance);\n            return;\n        }\n\n        const newSize = size / 2;\n        const height = size * Math.sqrt(2/3); // Height of regular tetrahedron\n        \n        // Calculate positions for the four sub-tetrahedra\n        // These positions form a regular tetrahedron\n        const positions = [\n            { x: x - newSize/2, y: y - height/4, z: z - newSize/2 },  // Bottom left\n            { x: x + newSize/2, y: y - height/4, z: z - newSize/2 },  // Bottom right\n            { x: x, y: y - height/4, z: z + newSize/2 },              // Bottom back\n            { x: x, y: y + height/2, z: z }                           // Top\n        ];\n\n        // Create sub-tetrahedra\n        positions.forEach(pos => {\n            subdivide(pos.x, pos.y, pos.z, newSize, currentLevel - 1);\n        });\n    }\n\n    // Start subdivision\n    subdivide(0, 0, 0, size, level);\n    return group;\n}\n\n// Function to create a simple Sierpinski pyramid with 5 models\nfunction createSimpleSierpinskiPyramid(size) {\n    const group = new THREE.Group();\n    \n    // Define the 5 positions for the models\n    // 4 models in a tight square formation + 1 centered above\n    const squareSize = size * 0.83;\n    const yOffset = -squareSize * 0.2;\n    const positions = [\n        { x: -squareSize/2, y: yOffset, z: -squareSize/2 },    // Bottom left\n        { x: squareSize/2, y: yOffset, z: -squareSize/2 },     // Bottom right\n        { x: squareSize/2, y: yOffset, z: squareSize/2 },      // Top right\n        { x: -squareSize/2, y: yOffset, z: squareSize/2 },     // Top left\n        { x: 0, y: squareSize + yOffset, z: 0 }                // Center top\n    ];\n\n    // Create models at each position\n    positions.forEach(pos => {\n        const modelInstance = baseModel.clone();\n        modelInstance.position.set(pos.x, pos.y, pos.z);\n        // Add a small point light to each model for Sierpinski\n        if (currentFractal === 'sierpinski') {\n            const modelLight = new THREE.PointLight(0xffffff, 2.0, 3);\n            modelLight.position.set(0, 0, 0);\n            modelInstance.add(modelLight);\n        }\n        group.add(modelInstance);\n    });\n\n    return group;\n}\n\n// Function to clear the current model\nfunction clearCurrentModel() {\n    while(modelGroup.children.length > 0) {\n        const child = modelGroup.children[0];\n        if (child.geometry) child.geometry.dispose();\n        if (child.material) {\n            if (Array.isArray(child.material)) {\n                child.material.forEach(material => material.dispose());\n            } else {\n                child.material.dispose();\n            }\n        }\n        modelGroup.remove(child);\n    }\n}\n\n// Add OrbitControls\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.1;\ncontrols.rotateSpeed = 0.7;\ncontrols.zoomSpeed = 0.7;\ncontrols.enablePan = false;\n\n// Function to update controls based on fractal type\nfunction updateControls(type) {\n    if (type === 'sierpinski') {\n        // Sierpinski controls - prevent zooming too close\n        const sierpinskiSize = 4 * 0.83; // Using the same size as the pyramid\n        controls.minDistance = sierpinskiSize * 1.5; // Minimum zoom distance\n        controls.maxDistance = 15; // Maximum zoom distance\n    } else {\n        // Menger controls - original settings\n        const modelSize = 2;\n        controls.minDistance = (modelSize * Math.sqrt(3) / 2) + 0.1;\n        controls.maxDistance = 10;\n    }\n    controls.target.set(0, 0, 0);\n    controls.update();\n}\n\n// Function to load a specific fractal model\nfunction loadFractalModel(type) {\n    clearCurrentModel();\n    currentFractal = type;\n    \n    // Update controls for the current fractal type\n    updateControls(type);\n    \n    // Update lighting based on fractal type\n    if (type === 'sierpinski') {\n        // Enable Sierpinski-specific lights\n        sierpinskiCenterLight.visible = true;\n        sierpinskiFillLight.visible = true;\n        // Disable Menger lights\n        mengerCenterLight.visible = false;\n        mengerKeyLight.visible = false;\n        mengerFillLight.visible = false;\n        mengerBackLight.visible = false;\n        // Adjust ambient light\n        ambientLight.intensity = 1.0;\n    } else {\n        // Enable Menger-specific lights\n        mengerCenterLight.visible = true;\n        mengerKeyLight.visible = true;\n        mengerFillLight.visible = true;\n        mengerBackLight.visible = true;\n        // Disable Sierpinski lights\n        sierpinskiCenterLight.visible = false;\n        sierpinskiFillLight.visible = false;\n        // Adjust ambient light\n        ambientLight.intensity = 1.5;\n    }\n    \n    // Reset loading progress\n    const progressBar = document.getElementById('loading-progress');\n    const loadingText = document.getElementById('loading-text');\n    progressBar.style.width = '0%';\n    loadingText.textContent = '0%';\n    \n    // Show loading container\n    document.getElementById('loading-container').style.display = 'block';\n\n    // Load the appropriate model based on type\n    const modelPath = type === 'sierpinski' ? 'sierpinski.glb' : `${type}_sponge.glb`;\n    \n    loader.load(\n        modelPath,\n        (gltf) => {\n            const model = gltf.scene;\n            \n            // Store the base model and its size\n            baseModel = model;\n            const box = new THREE.Box3().setFromObject(model);\n            baseModelSize = Math.max(\n                box.max.x - box.min.x,\n                box.max.y - box.min.y,\n                box.max.z - box.min.z\n            );\n            \n            // Apply materials to base model\n            const material = new THREE.MeshStandardMaterial({\n                color: 0x4169E1,\n                metalness: 0.7,\n                roughness: 0.2,\n                transparent: true,\n                opacity: 1.0,\n                flatShading: true\n            });\n            \n            model.traverse((child) => {\n                if (child.isMesh) {\n                    child.material = material;\n                }\n            });\n            \n            // Create the appropriate fractal based on type\n            if (type === 'sierpinski') {\n                // Create the 5-model Sierpinski pyramid\n                const pyramid = createSimpleSierpinskiPyramid(4);\n                modelGroup.add(pyramid);\n                // Adjust camera for better view\n                camera.position.set(8, 8, 8);\n                controls.target.set(0, 0, 0);\n                controls.update();\n            } else {\n                // Create Menger sponge pattern\n                const fractal = createMengerSponge(1, 2);\n                modelGroup.add(fractal);\n                camera.position.set(0, 0, 5);\n                controls.target.set(0, 0, 0);\n                controls.update();\n            }\n            \n            // Hide loading container\n            document.getElementById('loading-container').style.display = 'none';\n        },\n        (xhr) => {\n            const progress = (xhr.loaded / xhr.total * 100);\n            const progressBar = document.getElementById('loading-progress');\n            const loadingText = document.getElementById('loading-text');\n            progressBar.style.width = progress + '%';\n            loadingText.textContent = Math.round(progress) + '%';\n        },\n        (error) => {\n            console.error('An error happened:', error);\n            const loadingText = document.getElementById('loading-text');\n            loadingText.textContent = 'Error loading model!';\n            loadingText.style.color = '#ff4444';\n        }\n    );\n}\n\n// Listen for fractal change events\nwindow.addEventListener('fractalChange', (event) => {\n    loadFractalModel(event.detail.type);\n});\n\n// Initial setup\nupdateControls('menger'); // Set initial controls for Menger\n\n// Optimized animation loop\nlet lastTime = 0;\nconst rotationSpeed = 0.001; // Reduced rotation speed\n\nfunction animate(currentTime) {\n    requestAnimationFrame(animate);\n    \n    // Calculate delta time for smooth animation\n    const delta = currentTime - lastTime;\n    lastTime = currentTime;\n    \n    // Only update rotation if enough time has passed and not in Sierpinski mode\n    if (delta > 16 && currentFractal !== 'sierpinski') { // Cap at ~60fps\n        modelGroup.rotation.x += rotationSpeed;\n        modelGroup.rotation.y += rotationSpeed;\n    }\n    \n    // Only update controls if they've changed\n    if (controls.enabled) {\n        controls.update();\n    }\n    \n    renderer.render(scene, camera);\n}\n\n// Start animation loop with timestamp\nanimate(performance.now());\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    const newWidth = window.innerWidth;\n    const newHeight = window.innerHeight;\n    \n    camera.aspect = newWidth / newHeight;\n    camera.updateProjectionMatrix();\n    \n    renderer.setSize(newWidth, newHeight);\n}); ","// Menu functionality\ndocument.addEventListener('DOMContentLoaded', () => {\n    const menuTabs = document.querySelectorAll('.menu-tab');\n    const loadingContainer = document.getElementById('loading-container');\n    const loadingText = document.getElementById('loading-text');\n\n    menuTabs.forEach(tab => {\n        tab.addEventListener('click', () => {\n            // Update active state\n            menuTabs.forEach(t => t.classList.remove('active'));\n            tab.classList.add('active');\n\n            // Update loading text\n            const fractalType = tab.dataset.fractal;\n            loadingText.textContent = `Loading ${fractalType}...`;\n            loadingContainer.style.display = 'block';\n\n            // Dispatch custom event for fractal change\n            const event = new CustomEvent('fractalChange', {\n                detail: { type: fractalType }\n            });\n            window.dispatchEvent(event);\n        });\n    });\n}); "],"names":["document","addEventListener","menuTabs","querySelectorAll","loadingContainer","getElementById","loadingText","forEach","tab","t","classList","remove","add","fractalType","dataset","fractal","textContent","style","display","event","CustomEvent","detail","type","window","dispatchEvent","console","log","THREE","error","Error","scene","THREE.Scene","background","THREE.Color","camera","THREE.PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","THREE.WebGLRenderer","antialias","powerPreference","precision","setSize","setPixelRatio","Math","min","devicePixelRatio","shadowMap","enabled","body","appendChild","domElement","loadingManager","THREE.LoadingManager","onProgress","url","itemsLoaded","itemsTotal","progress","progressBar","width","round","onLoad","onError","color","loader","GLTFLoader","modelGroup","THREE.Group","baseModel","baseModelSize","currentFractal","ambientLight","THREE.AmbientLight","mengerCenterLight","THREE.PointLight","set","mengerKeyLight","THREE.DirectionalLight","mengerFillLight","mengerBackLight","sierpinskiCenterLight","visible","sierpinskiFillLight","controls","OrbitControls","updateControls","sierpinskiSize","minDistance","maxDistance","modelSize","sqrt","target","update","loadFractalModel","children","length","child","geometry","dispose","material","Array","isArray","clearCurrentModel","intensity","modelPath","load","gltf","model","box","THREE.Box3","setFromObject","max","x","y","THREE.MeshStandardMaterial","metalness","roughness","transparent","opacity","flatShading","traverse","isMesh","pyramid","size","group","squareSize","yOffset","pos","modelInstance","clone","modelLight","createSimpleSierpinskiPyramid","level","subdivide","currentLevel","scale","setScalar","newSize","i","j","k","abs","createMengerSponge","xhr","loaded","total","enableDamping","dampingFactor","rotateSpeed","zoomSpeed","enablePan","lastTime","animate","currentTime","requestAnimationFrame","delta","rotation","render","performance","now","newWidth","newHeight","aspect","updateProjectionMatrix"],"mappings":"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"}